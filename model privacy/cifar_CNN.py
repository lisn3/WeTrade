import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam, SGD
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
import os
import tensorflow as tf
import numpy as np
import random
import cv2
from dataloader import load_data

config = tf.ConfigProto()
config.gpu_options.allow_growth = True
sess = tf.InteractiveSession(config = config)

batch_size = 32
nb_classes = 10
epochs = 50
data_augmentation = True
save_dir = os.path.join(os.getcwd(), 'model')

# The data, split between train and test sets:
X_train, X_test, y_train, y_test=load_data('cifar10')

def cnn_keras():
    model = Sequential()
    model.add(Conv2D(32, (3, 3), padding='same',
                     input_shape=X_train.shape[1:]))
    model.add(Activation('relu'))
    model.add(Conv2D(32, (3, 3)))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Conv2D(64, (3, 3), padding='same'))
    model.add(Activation('relu'))
    model.add(Conv2D(64, (3, 3)))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Flatten())
    model.add(Dense(512))
    model.add(Activation('relu'))
    model.add(Dropout(0.5))
    model.add(Dense(nb_classes))
    model.add(Activation('softmax'))

    # initiate RMSprop optimizer
    opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)
    adam = Adam(lr=0.0001, beta_1=0.9, beta_2=0.999, epsilon=1e-08)
    # Let's train the model using RMSprop
    model.compile(loss='categorical_crossentropy',
                  optimizer=adam,
                  metrics=['accuracy'])

    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        zca_epsilon=1e-06,  # epsilon for ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        # randomly shift images horizontally (fraction of total width)
        width_shift_range=0.1,
        # randomly shift images vertically (fraction of total height)
        height_shift_range=0.1,
        shear_range=0.,  # set range for random shear
        zoom_range=0.,  # set range for random zoom
        channel_shift_range=0.,  # set range for random channel shifts
        # set mode for filling points outside the input boundaries
        fill_mode='nearest',
        cval=0.,  # value used for fill_mode = "constant"
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False,  # randomly flip images
        # set rescaling factor (applied before any other transformation)
        rescale=None,
        # set function that will be applied on each input
        preprocessing_function=None,
        # image data format, either "channels_first" or "channels_last"
        data_format=None,
        # fraction of images reserved for validation (strictly between 0 and 1)
        validation_split=0.0)


    datagen.fit(X_train)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(X_train, y_train,
                                     batch_size=batch_size),
                        epochs=epochs,
                        validation_data=(X_test, y_test),
                        workers=4)

    model.save('model/cifar_cnn.h5')

    # Score trained model.
    scores = model.evaluate(X_test, y_test, verbose=1)
    print('Test loss:', scores[0])
    print('Test accuracy:', scores[1])


#tf.nn.conv2d(input, filter, strides, padding, use_cudnn_on_gpu=None, name=None)
# input : [batch, in_height, in_width, in_channels]
# filter: [filter_height, filter_width, in_channels, out_channels]
# return： [batch, height, width, out_channels]

def LeNet_cifar(inputs):
    mu = 0
    sigma = 0.1
    init_method=tf.contrib.layers.variance_scaling_initializer()
    print(inputs.shape)
    # TODO: 第一层卷积：输入=32x32x3, 输出=32x32x16
    conv1_w = tf.get_variable(name="conv1_w", shape=[3, 3, 3, 16], dtype=tf.float32,initializer=init_method)
    #conv1_w = tf.Variable(tf.truncated_normal(shape=[3, 3, 3, 16], mean=mu, stddev=sigma), name='conv1_w')
    conv1_b = tf.Variable(tf.truncated_normal([16], stddev=1.0/32), name='conv1_b')
    conv1 = tf.nn.conv2d(inputs, conv1_w, strides=[1, 1, 1, 1], padding='SAME') + conv1_b
    print(conv1.shape)
    #bn1 = tf.layers.batch_normalization(conv1, training=is_training)
    conv1_out = tf.nn.relu(conv1, name='conv1')# 激活函数

    # TODO: 第二层卷积： 输入=32x32x16， 输出=32x32x32
    conv2_w = tf.get_variable(name="conv2_w", shape=[3, 3, 16, 32], dtype=tf.float32,initializer=init_method)
    #conv2_w = tf.Variable(tf.truncated_normal(shape=[3, 3, 16, 32], mean=mu, stddev=sigma), name='conv2_w')
    conv2_b = tf.Variable(tf.truncated_normal([32], stddev=1.0/32), name='conv2_b')
    conv2 = tf.nn.conv2d(conv1_out, conv2_w, strides=[1, 1, 1, 1], padding='SAME') + conv2_b
    print(conv2.shape)
    #bn2 = tf.layers.batch_normalization(conv2, training=is_training)
    conv2_out = tf.nn.relu(conv2, name='conv2')# 激活函数

    # 池化层， 输入=32x32x32, 输出16x16x32
    pool_1 = tf.nn.max_pool(conv2_out, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')
    print(pool_1.shape)

    # TODO: 第三层卷积： 输入=16x16x32, 输出=16x16x64
    conv3_w = tf.get_variable(name="conv3_w", shape=[3, 3, 32, 64], dtype=tf.float32,initializer=init_method)
    #conv3_w=tf.Variable(tf.truncated_normal(shape=[3,3,32, 64], mean=mu, stddev=sigma), name='conv3_w')
    conv3_b=tf.Variable(tf.truncated_normal([64], stddev=1.0/32), name='conv3_b')
    conv3 = tf.nn.conv2d(pool_1, conv3_w, strides=[1,1,1,1], padding='SAME')+conv3_b
    print(conv3.shape)
    #bn3 = tf.layers.batch_normalization(conv3, training=is_training)
    conv3_out=tf.nn.relu(conv3, name='conv3')

    #TODO: 第四层卷积： 16x16x64   16x16x32
    conv4_w = tf.get_variable(name="conv4_w", shape=[3, 3, 64, 32], dtype=tf.float32,initializer=init_method)
    #conv4_w = tf.Variable(tf.truncated_normal(shape=[3, 3, 64, 32], mean=mu, stddev=sigma), name='conv4_w')
    conv4_b = tf.Variable(tf.truncated_normal([32], stddev=1.0/32), name='conv4_b')
    conv4 = tf.nn.conv2d(conv3_out, conv4_w, strides=[1, 1, 1, 1], padding='SAME') + conv4_b
    print(conv4.shape)
    conv4_out = tf.nn.relu(conv4, name='conv4')

    #输入 16x16x32  输出 8x8x32
    pool_2=tf.nn.max_pool(conv4_out, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')
    print(pool_2.shape)

    # Flatten 输入=8x8x32， 输出=
    pool_2_flat = tf.reshape(pool_2, [-1, 1024*2])
    # TODO: 第五层全连接层， 输入=1024*4， 输出=512
    fc1_w = tf.Variable(tf.truncated_normal(shape=[1024*2, 128], mean=mu, stddev=sigma))
    fc1_b = tf.Variable(tf.truncated_normal([128], stddev=1.0/32))
    fc1 = tf.matmul(pool_2_flat, fc1_w) + fc1_b

    # 激活函数
    fc1_out = tf.nn.relu(fc1, name='fc1')
    print(fc1_out.shape)

    # TODO: 第四层全连接层： 输入=512， 输出=10
    fc2_w = tf.Variable(tf.truncated_normal(shape=[128, 10], mean=mu, stddev=sigma))
    fc2_b = tf.Variable(tf.truncated_normal([10], stddev=1.0/32))

    logits = tf.matmul(fc1_out, fc2_w) + fc2_b
    # 激活函数
    print(logits.shape)
    return logits


x = tf.placeholder(tf.float32,shape = [None,32,32,3],name='x')
y_= tf.placeholder(tf.float32,shape=[None,10],name='y_labels')
#is_training = tf.placeholder(tf.bool, [], name='is_training')

logits=LeNet_cifar(x)
pred_y=tf.nn.softmax(logits)
xent = tf.nn.softmax_cross_entropy_with_logits(labels=y_,logits=logits)
loss = tf.reduce_mean(xent, name='loss')
optimizer = tf.train.AdamOptimizer()
train_step = optimizer.minimize(loss)
correct_prediction = tf.equal(tf.argmax(pred_y,1), tf.argmax(y_,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction,"float"))

saver = tf.train.Saver()
init = tf.global_variables_initializer()
sess.run(init)

tf.add_to_collection("accuracy",accuracy)

cur_pos=0
ckpt_path='model/cifar_cnn.ckpt'
if os.path.exists('{}.meta'.format(ckpt_path)):
    saver = tf.train.import_meta_graph('{}.meta'.format(ckpt_path))
    saver.restore(sess, ckpt_path)
    print("\n【Model restored】")

for i in range(5000):
    if cur_pos+batch_size<X_train.shape[0]:
        start=cur_pos
        end=cur_pos+batch_size
        cur_pos = end
    else:
        start=cur_pos
        end=X_train.shape[0]-1
        cur_pos=0
    batch_xs=X_train[start:end]
    batch_ys=y_train[start:end]

    sess.run(train_step,feed_dict={x:batch_xs, y_:batch_ys})
    if(i%100==0):
        train_accuracy = accuracy.eval(session=sess,
                                       feed_dict={x:batch_xs , y_: batch_ys})
        print("step %d, train_accuracy %g" % (i, train_accuracy))

print("testing accuracy:",sess.run(accuracy,feed_dict={x: X_test, y_: y_test}))


save_path = saver.save(sess, ckpt_path)
print ("Model saved in file: ", ckpt_path)